{"name": "test_baidu", "status": "broken", "statusDetails": {"message": "Exception", "trace": "args = (<data_record_exception.test_baidu.TestBaidu object at 0x00000164267B12B0>,), kwargs = {}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ba43a31d82ec2b117f23eedea066a377\")>, timestamp = 1670891501\nimage_path = './images/image_1670891501.PNG', page_source_path = './page_source/page_source_1670891501.html'\nf = <_io.TextIOWrapper name='./page_source/page_source_1670891501.html' mode='w' encoding='u8'>\n\n    def inner(*args, **kwargs):\n        # 获取被装饰方法的self，也就是实例对象\n        # 通过self就可以拿到声明的实例变量driver\n        # 前提条件：1.被装饰的方法是一个实例方法 2.实例需要有实例变量self.driver\n        # ===问题：被装饰函数还没有执行，所哟还没有self.driver\n        # 解决方案1：获取driver放在函数执行之后\n        # 解决方案2：保证使用装饰器的时候，driver已经声明\n        # driver = args[0].driver\n        try:\n            # 当被装饰方法/函数发生异常就捕获并做数据记录\n>           return func(*args, **kwargs)\n\ntest_baidu.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <data_record_exception.test_baidu.TestBaidu object at 0x00000164267B12B0>\n\n    @ui_exception_record\n    def test_baidu(self):\n        # self.driver = webdriver.Chrome()\n        self.driver.get(\"https://www.baidu.com/\")\n>       self.driver.find_element(By.ID, \"su1\")\n\ntest_baidu.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ba43a31d82ec2b117f23eedea066a377\")>, by = 'css selector', value = '[id=\"su1\"]'\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\nC:\\Users\\15195\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:855: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ba43a31d82ec2b117f23eedea066a377\")>, driver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '[id=\"su1\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Users\\15195\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000164267B1580>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C67BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C67B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"su1\"]\"}\nE         (Session info: chrome=108.0.5359.99)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00C4ACD3+2075859]\nE       \tOrdinal0 [0x00BDEE61+1633889]\nE       \tOrdinal0 [0x00ADB7BD+571325]\nE       \tOrdinal0 [0x00B0AC2F+764975]\nE       \tOrdinal0 [0x00B0AE1B+765467]\nE       \tOrdinal0 [0x00B3D0F2+970994]\nE       \tOrdinal0 [0x00B27364+881508]\nE       \tOrdinal0 [0x00B3B56A+963946]\nE       \tOrdinal0 [0x00B27136+880950]\nE       \tOrdinal0 [0x00AFFEFD+720637]\nE       \tOrdinal0 [0x00B00F3F+724799]\nE       \tGetHandleVerifier [0x00EFEED2+2769538]\nE       \tGetHandleVerifier [0x00EF0D95+2711877]\nE       \tGetHandleVerifier [0x00CDA03A+521194]\nE       \tGetHandleVerifier [0x00CD8DA0+516432]\nE       \tOrdinal0 [0x00BE682C+1665068]\nE       \tOrdinal0 [0x00BEB128+1683752]\nE       \tOrdinal0 [0x00BEB215+1683989]\nE       \tOrdinal0 [0x00BF6484+1729668]\nE       \tBaseThreadInitThunk [0x7743FEF9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C67BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C67B8E+238]\n\nC:\\Users\\15195\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nargs = (<data_record_exception.test_baidu.TestBaidu object at 0x00000164267B12B0>,), kwargs = {}\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ba43a31d82ec2b117f23eedea066a377\")>, timestamp = 1670891501\nimage_path = './images/image_1670891501.PNG', page_source_path = './page_source/page_source_1670891501.html'\nf = <_io.TextIOWrapper name='./page_source/page_source_1670891501.html' mode='w' encoding='u8'>\n\n    def inner(*args, **kwargs):\n        # 获取被装饰方法的self，也就是实例对象\n        # 通过self就可以拿到声明的实例变量driver\n        # 前提条件：1.被装饰的方法是一个实例方法 2.实例需要有实例变量self.driver\n        # ===问题：被装饰函数还没有执行，所哟还没有self.driver\n        # 解决方案1：获取driver放在函数执行之后\n        # 解决方案2：保证使用装饰器的时候，driver已经声明\n        # driver = args[0].driver\n        try:\n            # 当被装饰方法/函数发生异常就捕获并做数据记录\n            return func(*args, **kwargs)\n        except Exception:\n            # 出现异常的处理\n            driver = args[0].driver  # 解决方案1：获取driver放在函数执行之后（放在这，兼容性更好一点）\n            # print(\"出现异常啦\")\n            # 截图操作\n            timestamp = int(time.time())\n            # 注意!!一定要提前创建好images路径\n            image_path = f\"./images/image_{timestamp}.PNG\"\n            page_source_path = f\"./page_source/page_source_{timestamp}.html\"\n            # 截图\n            driver.save_screenshot(image_path)\n            # 记录page_source\n            with open(page_source_path, \"w\", encoding=\"u8\") as f:\n                f.write(driver.page_source)\n            # 将截图放到报告的数据中\n            allure.attach.file(image_path, name=\"picture\", attachment_type=allure.attachment_type.PNG)\n            # 将page_source记录到报告中\n            # 如果想要html源码格式使用text，如果想要页面格式就用html\n            # allure.attach.file(page_source_path, name=\"page_source\", attachment_type=allure.attachment_type.HTML)\n            allure.attach.file(page_source_path, name=\"page_source\", attachment_type=allure.attachment_type.TEXT)\n>           raise Exception\nE           Exception\n\ntest_baidu.py:53: Exception"}, "attachments": [{"name": "picture", "source": "a3666fd4-e5fc-4a47-9a58-2171576bcb16-attachment.png", "type": "image/png"}, {"name": "page_source", "source": "59ca0541-97d5-4696-8eba-3d87afde96d0-attachment.txt", "type": "text/plain"}], "start": 1670891500061, "stop": 1670891502558, "uuid": "9b004d96-b97c-42d9-8f59-01c20ad86ecb", "historyId": "969a331dfb2e25b612ae25334ad19361", "testCaseId": "2a46874a054221dd1287783781c5f5de", "fullName": "test_baidu.TestBaidu#test_baidu", "labels": [{"name": "suite", "value": "test_baidu"}, {"name": "subSuite", "value": "TestBaidu"}, {"name": "host", "value": "DESKTOP-R8S5TAE"}, {"name": "thread", "value": "38696-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_baidu"}]}